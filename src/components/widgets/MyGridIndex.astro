---
import WidgetWrapper from '~/components/ui/WidgetWrapper.astro';
import Headline from '~/components/ui/Headline.astro';
import Image from '~/components/common/Image.astro';
import type { ImageMetadata } from 'astro';
import type { Video } from '~/types';

interface GridItem {
  image?: ImageMetadata | Record<string, unknown>;
  video?: Video;
  href?: string;
  title?: string;
}

export interface Props {
  title?: string;
  subtitle?: string;
  tagline?: string;
  items?: Array<GridItem>;
  showHeader?: boolean;
  showTitles?: boolean;
  id?: string;
  isDark?: boolean;
  classes?: Record<string, string | Record<string, string>>;
  bg?: string;
}

const {
  title,
  subtitle,
  tagline,
  items = [],
  showHeader = true,
  showTitles = true,
  id,
  isDark = false,
  classes = {},
  bg,
} = Astro.props;

// Most impactful size controls - change these to adjust overall layout
const containerMaxWidth = 'max-w-3xl'; // max-w-2xl, max-w-4xl, max-w-6xl, max-w-full
const gridColumns = 'columns-1 sm:columns-2'; // columns-1, columns-1 sm:columns-2 lg:columns-3
const itemWidth = 'w-full'; // w-full, w-3/4, w-1/2, w-2/3
---

<WidgetWrapper
  id={id}
  isDark={isDark}
  containerClass={`${containerMaxWidth} mx-auto ${classes?.container ?? ''}`}
  bg={bg}
>
  {
    showHeader && (title || subtitle || tagline) && (
      <Headline
        title={title}
        subtitle={subtitle}
        tagline={tagline}
        classes={typeof classes?.headline === 'object' ? classes.headline : {}}
      />
    )
  }

  {
    items && items.length > 0 && (
      <div class={`${gridColumns} gap-8 space-y-8`}>
        {items.map(({ image, video, href, title: itemTitle }) => {
          const content = (
            <div class="overflow-hidden">
              {video ? (
                // Fix autoplay mobile devices: Remove autoplay attribute and add class for JS targeting
                <video
                  class={`${itemWidth} h-auto object-cover group-hover:opacity-90 transition-opacity duration-300 portfolio-video`}
                  muted
                  loop
                  playsinline
                  data-src={video.src}
                >
                  <source src={video.src} type={video.type || 'video/mp4'} />
                  Your browser does not support the video tag.
                </video>
              ) : image ? (
                <Image
                  class={`${itemWidth} h-auto object-cover group-hover:opacity-90 transition-opacity duration-300`}
                  widths={[300, 500]}
                  sizes="(max-width: 768px) 100vw, 50vw"
                  {...image}
                />
              ) : null}
              {showTitles && itemTitle && (
                <div class="mt-4 text-center">
                  <h3 class="text-lg font-semibold text-default group-hover:text-primary transition-colors duration-300">
                    {itemTitle}
                  </h3>
                </div>
              )}
            </div>
          );

          return href ? (
            <a
              href={href}
              class="block group hover:scale-105 transition-transform duration-300 break-inside-avoid mb-8"
            >
              {content}
            </a>
          ) : (
            <div class="block break-inside-avoid mb-8">{content}</div>
          );
        })}
      </div>
    )
  }
</WidgetWrapper>

<script>
  // Fix autoplay mobile devices
  function initializeVideos() {
    const videos = document.querySelectorAll('.portfolio-video');

    videos.forEach((video) => {
      // Cast to HTMLVideoElement so TypeScript knows it's a video element
      const videoElement = video as HTMLVideoElement;
      videoElement.currentTime = 0;
      videoElement.load();

      const playPromise = videoElement.play();

      if (playPromise !== undefined) {
        playPromise.catch((error: Error) => {
          console.log('Video autoplay prevented by browser policy:', error);
        });
      }
    });
  }

  document.addEventListener('DOMContentLoaded', initializeVideos);
  document.addEventListener('astro:page-load', initializeVideos);
  document.addEventListener('astro:after-swap', initializeVideos);
</script>
